Request Handler

Methods:

	.handMsg():
		Responsible to handle messages delivered to the node, each representing a remote procedure call.
		
		
		* NEW_QUERY *
		
			args1 : XML representation of query
			args2 : Map with operator name and bytecode
			
			Sent by Submitter, received by Coordinator (can be same).
			It instantiates a new Query object given the XML representation and the compiled bytecode 
			for the operators. Send by the SUBMITTER to coordinator node (usually to itself), it 
			triggers the creation of a COORDINATOR which is in charge of deploying the query to the 
			processing nodes and then managing it.
			
			
		* ASK_NODES *
		
			args1 : N nodes
			args2 : QueryID
			args3 : Source rate (deprecated)
			
			Sent by Coordinator, received by the Oracle. 
			It selects N nodes according to a certain policy and sends back a RECEIVE_NODES message to 
			the Coordinator.
			
			
		* RECEIVE_NODES	*
		
			args1 : QueryID
			args2 : Number of nodes
			args3 : List of nodes (ip:port)
			
			Sent by Coordinator, received by Coordinator.
			It contains a list of N nodes, selected by the Oracle, on which to deploy the subqueries.
			This list is the used by the Coordinator to partition a query among them.
			

		* NEW_SUBQUERY *
		
			args1 : XML representation of the subquery
			args2 : Map containing the bytecode for operator encoded in Base64 as <OpName, OpBytecode>.
			
			Sent by Coordinator, received by processing Node.	
			This message contains a precompiled subquery generated by the Coordinator. The nodes uses 
			the XML representation and the provided operator bytecodes to instantiate a new subquery.
			A new Query object is instantiated, the subquery is registered and started, via the creation
			of a QueryConnector.
			
			
		* PROBE_REPLY *
			args1 : otherQueryID
			args2 : otherOperatorID
			args3 : okno 
			
			Sent by upstream node to downstream node. (RS to RR)
			Sent upon receipt of GET request terminating with 'DISSP', which signals the connection by 
			another processing node. When received the corresponding operator (RR) is unblocked if the third
			argument is OK. After this tuples can start flowing.
			
		* SET_COORDINATOR *
			args1 : CompleteQueryID (...why?) 
			args2 : number of sources (...why?)
			args3 : ip of Coordinator
			args4 : port of Coordinator
			
			Sent by Coordinator, received by all processing nodes of a query.
			It tells them about the location of the Coordinator.
			
		* REPORT_DEPLOYMENT *
			args1 : list of ip:port:cqid 
			
			Sent by Coordinator, received by Oracle.
			Tells the Oracle about the location of each subquery.
			
		
---------------------------------------------------------------------------------------------------------

		* SET_ALIVE *
			
			Sent by every processing node to the Oracle at interval time. It signals that the node is up
			and running.
			
		
		* LOAD_INFO *
			args1 : metrics..
			args2 : metrics..
			...
			
			Sent by every processing node to the Oracle at interval time. It contains a number of metrics.
			(.. should be improved by sending all metrics at once)
		
		
		* REPORT_QUERY_GU *
			args1 : queryID
			args2 : ip
			args3 : port
			args4 : querygu
			args5 : totTuples
			
			Sent by Coordinator, received by the Oracle. 
			It contains the global SIC value achieved by the query. It's part of the "bounceGU" 
			routine performed by the Coordinator, during which it first informs all the processing nodes 
			with a SET_NEW_GU message and then the Oracle.
			
			
		* SET_NEW_GU *	
			args1 : sic value of query
			
			Sent by Coordinator, received by Processing nodes. 
			It updates all the processing nodes about the current achieved SIC for the query.
		
			
		* REPORT_GU *
			args1 : sic value of query 
			
			Sent by Terminal node, received by Coordinator.
			This is sent by a Terminal node at interval time to the Coordinator. This triggers the "bouceGU"
			routine, which sends a REPORT_QUERY_GU to the Oracle and a SET_NEW_GU to all processing nodes.
		
			
		* REPORT_NODE_GU *
			Sent by processing node, received by Oracle.
			Reports about the average local SIC value at a node.
		
		
		* REPORT_NODE_LATENCY *
			Sent by processing node, received by Oracle.
			Reports about the average latency of tuples at a node.
			
			
		* REPORT_AVG_SIC *
			Sent by Oracle, received by processing nodes.
			It updates the nodes about the average SIC value of all queries in the system.
			
			